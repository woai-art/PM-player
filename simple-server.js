const http = require('http');
const url = require('url');
const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');
const VLCPlayer = require('./vlc-player');

// MIME —Ç–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.wav': 'audio/wav',
    '.mp4': 'video/mp4',
    '.woff': 'application/font-woff',
    '.ttf': 'application/font-ttf',
    '.eot': 'application/vnd.ms-fontobject',
    '.otf': 'application/font-otf',
    '.wasm': 'application/wasm'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–∑–æ–≤—ã—Ö URL –¥–ª—è HLS —Å–µ–≥–º–µ–Ω—Ç–æ–≤
// HLS –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VLC –ø–ª–µ–µ—Ä–∞
const vlcPlayer = new VLCPlayer();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const downloadsDir = path.join(__dirname, 'downloads');
if (!fs.existsSync(downloadsDir)) {
    fs.mkdirSync(downloadsDir, { recursive: true });
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ downloads:', downloadsDir);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
function downloadVideo(videoUrl, quality, downloadPath, callback) {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:', videoUrl, '–∫–∞—á–µ—Å—Ç–≤–æ:', quality);
    
    // –ü—É—Ç—å –∫ yt-dlp –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    const ytDlpPath = path.join(__dirname, 'venv', 'Scripts', 'yt-dlp.exe');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(downloadPath)) {
        fs.mkdirSync(downloadPath, { recursive: true });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    let formatSelector;
    if (quality === 'best') {
        formatSelector = 'best[height<=1080]/best';
    } else {
        formatSelector = `${quality}/best[height<=${quality.replace('p', '')}]/best`;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∞–π—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const isAdultSite = videoUrl.includes('pornhub.com') || 
                       videoUrl.includes('xvideos.com') || 
                       videoUrl.includes('xhamster.com');
    const isYouTube = videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be');
    const isRussianSite = videoUrl.includes('rutube.ru') || 
                         videoUrl.includes('vk.com') || 
                         videoUrl.includes('mail.ru');
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const args = [
        '--no-cache-dir',
        '--format', formatSelector,
        '--no-playlist',
        '--playlist-items', '1',
        '--output', path.join(downloadPath, '%(title)s.%(ext)s'),
        '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        '--extractor-retries', '5',
        '--fragment-retries', '5',
        '--retry-sleep', '2',
        '--write-info-json',
        '--write-thumbnail',
        '--embed-metadata',
        '--add-metadata'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∞–π—Ç–æ–≤
    if (isAdultSite) {
        console.log('üîû –û–±–Ω–∞—Ä—É–∂–µ–Ω adult-—Å–∞–π—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        args.push('--age-limit', '18');
        args.push('--no-check-certificate');
        args.push('--ignore-errors');
    }
    
    if (isYouTube) {
        console.log('üì∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω YouTube, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
        args.push('--extract-flat', 'false');
        args.push('--no-warnings');
    }
    
    if (isRussianSite) {
        console.log('üá∑üá∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Å–∞–π—Ç, –¥–æ–±–∞–≤–ª—è–µ–º geo-bypass');
        args.push('--geo-bypass');
        args.push('--geo-bypass-country', 'RU');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫–æ–Ω—Ü–µ
    args.push(videoUrl);
    
    console.log('üìã –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', ytDlpPath, args.join(' '));
    
    const ytDlp = spawn(ytDlpPath, args, {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: false
    });
    
    let stdout = '';
    let stderr = '';
    let downloadProgress = '';
    
    ytDlp.stdout.on('data', (data) => {
        const output = data.toString();
        stdout += output;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (output.includes('%')) {
            const lines = output.split('\n');
            for (const line of lines) {
                if (line.includes('%') && line.includes('ETA')) {
                    downloadProgress = line.trim();
                    console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:', downloadProgress);
                }
            }
        }
    });
    
    ytDlp.stderr.on('data', (data) => {
        const output = data.toString();
        stderr += output;
        console.log('üìù yt-dlp stderr:', output);
    });
    
    ytDlp.on('close', (code) => {
        console.log('üìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º:', code);
        
        if (code === 0) {
            // –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            const files = fs.readdirSync(downloadPath);
            const videoFiles = files.filter(file => {
                const ext = path.extname(file).toLowerCase();
                return ['.mp4', '.webm', '.mkv', '.avi', '.mov'].includes(ext);
            });
            
            if (videoFiles.length > 0) {
                const downloadedFile = videoFiles[videoFiles.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
                const filePath = path.join(downloadPath, downloadedFile);
                const fileStats = fs.statSync(filePath);
                
                console.log('‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:', downloadedFile);
                callback(null, {
                    fileName: downloadedFile,
                    filePath: filePath,
                    fileSize: fileStats.size,
                    downloadTime: new Date().toISOString()
                });
            } else {
                console.error('‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                callback(new Error('–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'), null);
            }
        } else {
            console.error('‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥...');
            
            // –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const fallbackArgs = [
                '--no-cache-dir',
                '--format', 'best',
                '--no-playlist',
                '--playlist-items', '1',
                '--output', path.join(downloadPath, '%(title)s.%(ext)s'),
                '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                '--ignore-errors',
                '--no-warnings',
                videoUrl
            ];
            
            console.log('üîÑ Fallback –∫–æ–º–∞–Ω–¥–∞:', ytDlpPath, fallbackArgs.join(' '));
            
            const fallbackYtDlp = spawn(ytDlpPath, fallbackArgs, {
                stdio: ['pipe', 'pipe', 'pipe'],
                shell: false
            });
            
            let fallbackStdout = '';
            let fallbackStderr = '';
            
            fallbackYtDlp.stdout.on('data', (data) => {
                const output = data.toString();
                fallbackStdout += output;
                console.log('üìä Fallback –ø—Ä–æ–≥—Ä–µ—Å—Å:', output.trim());
            });
            
            fallbackYtDlp.stderr.on('data', (data) => {
                const output = data.toString();
                fallbackStderr += output;
                console.log('üìù Fallback stderr:', output);
            });
            
            fallbackYtDlp.on('close', (fallbackCode) => {
                if (fallbackCode === 0) {
                    // –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    const files = fs.readdirSync(downloadPath);
                    const videoFiles = files.filter(file => {
                        const ext = path.extname(file).toLowerCase();
                        return ['.mp4', '.webm', '.mkv', '.avi', '.mov'].includes(ext);
                    });
                    
                    if (videoFiles.length > 0) {
                        const downloadedFile = videoFiles[videoFiles.length - 1];
                        const filePath = path.join(downloadPath, downloadedFile);
                        const fileStats = fs.statSync(filePath);
                        
                        console.log('‚úÖ Fallback —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', downloadedFile);
                        callback(null, {
                            fileName: downloadedFile,
                            filePath: filePath,
                            fileSize: fileStats.size,
                            downloadTime: new Date().toISOString()
                        });
                    } else {
                        const error = new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ fallback —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
                        console.error('‚ùå Fallback –æ—à–∏–±–∫–∞:', error.message);
                        callback(error, null);
                    }
                } else {
                    const error = new Error(stderr || fallbackStderr || '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ');
                    console.error('‚ùå –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error.message);
                    callback(error, null);
                }
            });
            
            fallbackYtDlp.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ fallback yt-dlp:', error.message);
                const finalError = new Error(stderr || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ');
                callback(finalError, null);
            });
        }
    });
    
    ytDlp.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error.message);
        callback(error, null);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è stream URL —Å —É–º–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞
function getStreamUrl(videoUrl, quality, callback) {
    console.log('üé¨ –ü–æ–ª—É—á–∞–µ–º stream URL –¥–ª—è:', videoUrl, '–∫–∞—á–µ—Å—Ç–≤–æ:', quality);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
    extractVideoInfo(videoUrl, (infoError, videoInfo) => {
        let isLive = false;
        let isRecent = false;
        
        if (!infoError && videoInfo) {
            isLive = videoInfo.is_live || videoInfo.live_status === 'is_live';
            isRecent = videoInfo.upload_date && 
                new Date(videoInfo.upload_date.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3')) > 
                new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        }
        
        console.log(`üìä –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${isLive ? 'Live Stream üî¥' : isRecent ? 'Recent Video üÜï' : 'Regular Video üìπ'}`);
        
        // –ü—É—Ç—å –∫ yt-dlp –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        const ytDlpPath = path.join(__dirname, 'venv', 'Scripts', 'yt-dlp.exe');
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û MP4 —Ñ–æ—Ä–º–∞—Ç—ã - –Ω–∏–∫–∞–∫–æ–≥–æ HLS!
        // –ö–∞–∫ –≤ DuckDuckGo –∏ Patreon - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏
        let formatSelector;
        if (isLive) {
            // –î–ª—è live-—Å—Ç—Ä–∏–º–æ–≤ —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º MP4, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–∫–∞–∂–µ–º—Å—è
            formatSelector = 'best[ext=mp4][height<=720]/best[ext=mp4]/worst[ext=mp4]';
        } else {
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ - –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û MP4
            formatSelector = quality === 'best' ? 
                'best[ext=mp4][height<=720]/best[ext=mp4]/worst[ext=mp4]' : 
                `${quality}[ext=mp4]/best[ext=mp4]`;
        }
        
        console.log('üéØ –§–æ—Ä–º–∞—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä:', formatSelector);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
        const args = [
            '--no-cache-dir',
            '--get-url',
            '--no-playlist',
            '--playlist-items', '1',
            '--format', formatSelector,
            '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            '--extractor-retries', '3',
            videoUrl
        ];
        
        console.log('üìã –ö–æ–º–∞–Ω–¥–∞ stream:', ytDlpPath, args.join(' '));
        
        const ytDlp = spawn(ytDlpPath, args, {
            stdio: ['pipe', 'pipe', 'pipe'],
            shell: false
        });
        
        let stdout = '';
        let stderr = '';
        
        ytDlp.stdout.on('data', (data) => {
            stdout += data.toString();
        });
        
        ytDlp.stderr.on('data', (data) => {
            stderr += data.toString();
        });
        
        ytDlp.on('close', (code) => {
            console.log('üìä yt-dlp stream –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º:', code);
            
            if (code === 0 && stdout.trim()) {
                const streamUrl = stdout.trim().split('\n')[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
                console.log('‚úÖ Stream URL –ø–æ–ª—É—á–µ–Ω:', streamUrl.substring(0, 100) + '...');
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Ç–æ–∫–∞
                if (streamUrl.includes('.m3u8')) {
                    console.log('üì∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω HLS –ø–æ—Ç–æ–∫ (.m3u8)');
                } else if (streamUrl.includes('videoplayback')) {
                    console.log('üé• –û–±–Ω–∞—Ä—É–∂–µ–Ω MP4 –ø–æ—Ç–æ–∫');
                } else {
                    console.log('üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Ç–æ–∫–∞');
                }
                
                callback(null, streamUrl);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è stream URL, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...');
                
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - MP4, WebM, –Ω–æ –ù–ï HLS
                const fallbackArgs = [
                    '--no-cache-dir',
                    '--get-url',
                    '--no-playlist',
                    '--playlist-items', '1',
                    '--format', 'worst[ext=mp4]/best[ext=webm]/worst[ext=webm]/best[ext!=m3u8]',
                    '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    '--extractor-retries', '3',
                    '--fragment-retries', '3',
                    videoUrl
                ];
                
                console.log('üîÑ Fallback –∫–æ–º–∞–Ω–¥–∞:', ytDlpPath, fallbackArgs.join(' '));
                
                const fallbackYtDlp = spawn(ytDlpPath, fallbackArgs, {
                    stdio: ['pipe', 'pipe', 'pipe'],
                    shell: false
                });
                
                let fallbackStdout = '';
                let fallbackStderr = '';
                
                fallbackYtDlp.stdout.on('data', (data) => {
                    fallbackStdout += data.toString();
                });
                
                fallbackYtDlp.stderr.on('data', (data) => {
                    fallbackStderr += data.toString();
                });
                
                fallbackYtDlp.on('close', (fallbackCode) => {
                    if (fallbackCode === 0 && fallbackStdout.trim()) {
                        const fallbackStreamUrl = fallbackStdout.trim().split('\n')[0];
                        console.log('‚úÖ Fallback Stream URL –ø–æ–ª—É—á–µ–Ω:', fallbackStreamUrl.substring(0, 100) + '...');
                        callback(null, fallbackStreamUrl);
                    } else {
                        const error = new Error(stderr || fallbackStderr || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å stream URL');
                        console.error('‚ùå –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è stream URL:', error.message);
                        callback(error, null);
                    }
                });
                
                fallbackYtDlp.on('error', (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ fallback yt-dlp:', error.message);
                    const finalError = new Error(stderr || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å stream URL');
                    callback(finalError, null);
                });
            }
        });
        
        ytDlp.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ yt-dlp –¥–ª—è stream:', error.message);
            callback(error, null);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è yt-dlp
function extractVideoInfo(videoUrl, callback) {
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ:', videoUrl);
    
    // –ü—É—Ç—å –∫ yt-dlp –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    const ytDlpPath = path.join(__dirname, 'venv', 'Scripts', 'yt-dlp.exe');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è yt-dlp
    const args = [
        '--no-cache-dir',
        '--dump-json',
        '--no-playlist',
        '--playlist-items', '1',
        '--format', 'best[height<=720]/best',
        '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        videoUrl
    ];
    
    console.log('üìã –ö–æ–º–∞–Ω–¥–∞:', ytDlpPath, args.join(' '));
    
    const ytDlp = spawn(ytDlpPath, args, {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: false
    });
    
    let stdout = '';
    let stderr = '';
    
    ytDlp.stdout.on('data', (data) => {
        stdout += data.toString();
    });
    
    ytDlp.stderr.on('data', (data) => {
        stderr += data.toString();
    });
    
    ytDlp.on('close', (code) => {
        console.log('üìä yt-dlp –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º:', code);
        
        if (code === 0 && stdout.trim()) {
            try {
                const videoInfo = JSON.parse(stdout.trim());
                console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–∞:', videoInfo.title);
                callback(null, videoInfo);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error.message);
                callback(error, null);
            }
        } else {
            const error = new Error(stderr || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ yt-dlp');
            console.error('‚ùå –û—à–∏–±–∫–∞ yt-dlp:', error.message);
            callback(error, null);
        }
    });
    
    ytDlp.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ yt-dlp:', error.message);
        callback(error, null);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞
function sendJSON(res, data, statusCode = 200) {
    res.writeHead(statusCode, {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
    });
    res.end(JSON.stringify(data));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
function sendFile(res, filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const contentType = mimeTypes[ext] || 'application/octet-stream';
    
    fs.readFile(filePath, (err, content) => {
        if (err) {
            if (err.code === 'ENOENT') {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            } else {
                res.writeHead(500, { 'Content-Type': 'text/plain' });
                res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } else {
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content);
        }
    });
}

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    
    console.log(`üì° ${req.method} ${pathname}`);
    
    // CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }
    
    // API –º–∞—Ä—à—Ä—É—Ç—ã
    if (pathname === '/api/extract') {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const { url: videoUrl } = JSON.parse(body);
                    if (!videoUrl) {
                        sendJSON(res, { error: 'URL –Ω–µ —É–∫–∞–∑–∞–Ω' }, 400);
                        return;
                    }
                    
                    extractVideoInfo(videoUrl, (error, videoInfo) => {
                        if (error) {
                            sendJSON(res, { error: error.message }, 500);
                        } else {
                            sendJSON(res, { success: true, videoInfo });
                        }
                    });
                } catch (error) {
                    sendJSON(res, { error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON' }, 400);
                }
            });
        } else {
            sendJSON(res, { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }, 405);
        }
        return;
    }
    
    // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
    if (pathname === '/api/stream') {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const { url: videoUrl, quality } = JSON.parse(body);
                    if (!videoUrl) {
                        sendJSON(res, { error: 'URL –Ω–µ —É–∫–∞–∑–∞–Ω' }, 400);
                        return;
                    }
                    
                    getStreamUrl(videoUrl, quality, (error, streamUrl) => {
                        if (error) {
                            sendJSON(res, { error: error.message }, 500);
                        } else {
                            sendJSON(res, { success: true, streamUrl });
                        }
                    });
                } catch (error) {
                    sendJSON(res, { error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON' }, 400);
                }
            });
        } else {
            sendJSON(res, { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }, 405);
        }
        return;
    }
    
    // API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
    if (pathname === '/api/download') {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const { url: videoUrl, quality, downloadPath } = JSON.parse(body);
                    if (!videoUrl) {
                        sendJSON(res, { error: 'URL –Ω–µ —É–∫–∞–∑–∞–Ω' }, 400);
                        return;
                    }
                    
                    const finalDownloadPath = downloadPath || path.join(__dirname, 'downloads');
                    
                    downloadVideo(videoUrl, quality || 'best', finalDownloadPath, (error, result) => {
                        if (error) {
                            sendJSON(res, { error: error.message }, 500);
                        } else {
                            sendJSON(res, { 
                                success: true, 
                                message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ',
                                ...result
                            });
                        }
                    });
                } catch (error) {
                    sendJSON(res, { error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON' }, 400);
                }
            });
        } else {
            sendJSON(res, { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }, 405);
        }
        return;
    }
    
    // API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ VLC
    if (pathname === '/api/vlc') {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const { url: videoUrl, action } = JSON.parse(body);
                    
                    if (action === 'check') {
                        sendJSON(res, { 
                            available: vlcPlayer.isAvailable(),
                            path: vlcPlayer.vlcPath 
                        });
                        return;
                    }
                    
                    if (action === 'stop') {
                        const stopped = vlcPlayer.stop();
                        sendJSON(res, { success: stopped });
                        return;
                    }
                    
                    if (action === 'play') {
                        if (!videoUrl) {
                            sendJSON(res, { error: 'URL –Ω–µ —É–∫–∞–∑–∞–Ω' }, 400);
                            return;
                        }
                        
                        if (!vlcPlayer.isAvailable()) {
                            sendJSON(res, { error: 'VLC Media Player –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 404);
                            return;
                        }
                        
                        vlcPlayer.playFromUrl(videoUrl)
                            .then(() => {
                                sendJSON(res, { success: true, message: '–í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ VLC' });
                            })
                            .catch(error => {
                                sendJSON(res, { error: error.message }, 500);
                            });
                        return;
                    }
                    
                    sendJSON(res, { error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }, 400);
                } catch (error) {
                    sendJSON(res, { error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON' }, 400);
                }
            });
        } else {
            sendJSON(res, { error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }, 405);
        }
        return;
    }
    
    // API –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
    if (pathname.startsWith('/proxy/')) {
        let videoUrl = decodeURIComponent(pathname.substring(7)); // –£–±–∏—Ä–∞–µ–º '/proxy/'
        
        // HLS —Å–µ–≥–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        if (!videoUrl.startsWith('http')) {
            console.error('‚ùå –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', videoUrl);
            res.writeHead(400, { 'Content-Type': 'text/plain' });
            res.end('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }
        
        // –û—Ç–∫–ª–æ–Ω—è–µ–º HLS –ø–æ—Ç–æ–∫–∏
        if (videoUrl.includes('.m3u8') || videoUrl.includes('.ts')) {
            console.error('‚ùå HLS –ø–æ—Ç–æ–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:', videoUrl);
            res.writeHead(400, { 'Content-Type': 'text/plain' });
            res.end('HLS –ø–æ—Ç–æ–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VLC');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if (!videoUrl.startsWith('http')) {
            console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL:', videoUrl);
            res.writeHead(400, { 'Content-Type': 'text/plain' });
            res.end('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        console.log('üîÑ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤–∏–¥–µ–æ:', videoUrl.substring(0, 100) + '...');
        
        // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        const https = require('https');
        const http_module = videoUrl.startsWith('https:') ? https : require('http');
        
        const proxyReq = http_module.get(videoUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Referer': 'https://www.youtube.com/',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'identity',
                'Range': req.headers.range || ''
            }
        }, (proxyRes) => {
            // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            const headers = {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Range',
                'Access-Control-Expose-Headers': 'Content-Length, Content-Range, Accept-Ranges'
            };
            
            // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if (proxyRes.headers['content-type']) {
                headers['Content-Type'] = proxyRes.headers['content-type'];
            }
            if (proxyRes.headers['content-length']) {
                headers['Content-Length'] = proxyRes.headers['content-length'];
            }
            if (proxyRes.headers['content-range']) {
                headers['Content-Range'] = proxyRes.headers['content-range'];
            }
            if (proxyRes.headers['accept-ranges']) {
                headers['Accept-Ranges'] = proxyRes.headers['accept-ranges'];
            }
            
            res.writeHead(proxyRes.statusCode, headers);
            proxyRes.pipe(res);
        });
        
        proxyReq.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
            res.writeHead(500, { 'Content-Type': 'text/plain' });
            res.end('–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ');
        });
        
        return;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cache-busting –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    if (pathname === '/' || pathname === '/index.html') {
        sendFile(res, path.join(__dirname, 'src', 'renderer', 'index.html'));
    } else if (pathname === '/renderer.js' || pathname.startsWith('/renderer.js?')) {
        sendFile(res, path.join(__dirname, 'src', 'renderer', 'renderer.js'));
    } else if (pathname === '/styles.css' || pathname.startsWith('/styles.css?')) {
        sendFile(res, path.join(__dirname, 'src', 'renderer', 'styles.css'));
    } else if (pathname.startsWith('/assets/')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ assets
        const assetPath = path.join(__dirname, pathname);
        sendFile(res, assetPath);
    } else {
        // 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
});

const PORT = 3001;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
}); 