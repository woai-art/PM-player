const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

class VLCPlayer {
    constructor() {
        this.vlcPath = this.findVLCPath();
        this.currentProcess = null;
    }

    // –ü–æ–∏—Å–∫ VLC –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    findVLCPath() {
        const possiblePaths = [
            'C:\\Program Files\\VideoLAN\\VLC\\vlc.exe',
            'C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe',
            'vlc.exe' // –ï—Å–ª–∏ VLC –≤ PATH
        ];

        for (const vlcPath of possiblePaths) {
            if (fs.existsSync(vlcPath)) {
                console.log('‚úÖ VLC –Ω–∞–π–¥–µ–Ω:', vlcPath);
                return vlcPath;
            }
        }

        console.log('‚ö†Ô∏è VLC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö');
        return null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VLC
    isAvailable() {
        return this.vlcPath !== null;
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ VLC
    playVideo(videoUrl, title = '') {
        if (!this.isAvailable()) {
            throw new Error('VLC Media Player –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.currentProcess) {
            this.currentProcess.kill();
        }

        console.log('üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º VLC –¥–ª—è:', title || videoUrl);

        const args = [
            videoUrl // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º VLC —Å –≤–∏–¥–µ–æ - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±
        ];

        if (title) {
            args.push('--meta-title', title);
        }

        this.currentProcess = spawn(this.vlcPath, args, {
            stdio: ['ignore', 'pipe', 'pipe']
        });

        this.currentProcess.stdout.on('data', (data) => {
            console.log('VLC stdout:', data.toString());
        });

        this.currentProcess.stderr.on('data', (data) => {
            console.log('VLC stderr:', data.toString());
        });

        this.currentProcess.on('close', (code) => {
            console.log('VLC –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º:', code);
            this.currentProcess = null;
        });

        this.currentProcess.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VLC:', error.message);
            this.currentProcess = null;
        });

        return true;
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    stop() {
        if (this.currentProcess) {
            this.currentProcess.kill();
            this.currentProcess = null;
            console.log('‚èπÔ∏è VLC –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return true;
        }
        return false;
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VLC —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
    async playFromUrl(originalUrl, quality = 'best') {
        return new Promise((resolve, reject) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            const { spawn } = require('child_process');
            const ytDlpPath = path.join(__dirname, 'venv', 'Scripts', 'yt-dlp.exe');

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è VLC
            const args = [
                '--no-cache-dir',
                '--get-url',
                '--no-playlist',
                '--playlist-items', '1',
                '--format', 'best[ext=mp4][height<=720]/best[ext=mp4]/best[height<=1080]/best',
                '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                originalUrl
            ];

            console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è VLC:', originalUrl);

            const ytDlp = spawn(ytDlpPath, args, {
                stdio: ['pipe', 'pipe', 'pipe'],
                shell: false
            });

            let stdout = '';
            let stderr = '';

            ytDlp.stdout.on('data', (data) => {
                stdout += data.toString();
            });

            ytDlp.stderr.on('data', (data) => {
                stderr += data.toString();
            });

            ytDlp.on('close', (code) => {
                if (code === 0 && stdout.trim()) {
                    const streamUrl = stdout.trim().split('\n')[0];
                    console.log('‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è VLC –ø–æ–ª—É—á–µ–Ω–∞');
                    
                    try {
                        this.playVideo(streamUrl, 'Media Player Video');
                        resolve(true);
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new Error(stderr || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è VLC'));
                }
            });

            ytDlp.on('error', (error) => {
                reject(error);
            });
        });
    }
}

module.exports = VLCPlayer; 